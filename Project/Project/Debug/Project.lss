
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  00000376  000003ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000376  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f7a  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ca9  00000000  00000000  0000143e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005dc  00000000  00000000  000020e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  000026c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005df  00000000  00000000  000027ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002c8  00000000  00000000  00002d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00003053  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	83 c1       	rjmp	.+774    	; 0x318 <__vector_4>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e7       	ldi	r30, 0x76	; 118
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 31       	cpi	r26, 0x12	; 18
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	3c d0       	rcall	.+120    	; 0x188 <main>
 110:	30 c1       	rjmp	.+608    	; 0x372 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <lunch>:
}

// function to write to the LCD
void lunch()
{
	PORTG |= (1 << 2); // set enable to 1
 114:	84 b3       	in	r24, 0x14	; 20
 116:	84 60       	ori	r24, 0x04	; 4
 118:	84 bb       	out	0x14, r24	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	89 ef       	ldi	r24, 0xF9	; 249
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <lunch+0xa>
 122:	00 c0       	rjmp	.+0      	; 0x124 <lunch+0x10>
 124:	00 00       	nop
	_delay_ms(1);	   // wait 1ms
	PORTG &= ~(1 << 2);
 126:	84 b3       	in	r24, 0x14	; 20
 128:	8b 7f       	andi	r24, 0xFB	; 251
 12a:	84 bb       	out	0x14, r24	; 20
 12c:	89 ef       	ldi	r24, 0xF9	; 249
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <lunch+0x1c>
 134:	00 c0       	rjmp	.+0      	; 0x136 <lunch+0x22>
 136:	00 00       	nop
 138:	08 95       	ret

0000013a <dataMode>:
	_delay_ms(1);
}
// function for LCD data mode
void dataMode()
{
	PORTG |= (1 << 0);	// set rs to 1- data mode
 13a:	84 b3       	in	r24, 0x14	; 20
 13c:	81 60       	ori	r24, 0x01	; 1
 13e:	84 bb       	out	0x14, r24	; 20
	PORTG &= ~(1 << 1); // set rw to 0- write mode
 140:	84 b3       	in	r24, 0x14	; 20
 142:	8d 7f       	andi	r24, 0xFD	; 253
 144:	84 bb       	out	0x14, r24	; 20
 146:	08 95       	ret

00000148 <commandMode>:
}
// function for LCD command mode
void commandMode()
{
	PORTG &= ~(1 << 0); // set rs to 0- command mode
 148:	84 b3       	in	r24, 0x14	; 20
 14a:	8e 7f       	andi	r24, 0xFE	; 254
 14c:	84 bb       	out	0x14, r24	; 20
	PORTG &= ~(1 << 1); // set rw to 0- write mode
 14e:	84 b3       	in	r24, 0x14	; 20
 150:	8d 7f       	andi	r24, 0xFD	; 253
 152:	84 bb       	out	0x14, r24	; 20
 154:	08 95       	ret

00000156 <rotateFridge>:
}

// function to rotate the motor
void rotateFridge()
{
	PORTJ = 0b00000010; // do rotate clockwise
 156:	e5 e0       	ldi	r30, 0x05	; 5
 158:	f1 e0       	ldi	r31, 0x01	; 1
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	80 83       	st	Z, r24
 15e:	2f e3       	ldi	r18, 0x3F	; 63
 160:	8d e0       	ldi	r24, 0x0D	; 13
 162:	93 e0       	ldi	r25, 0x03	; 3
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <rotateFridge+0xe>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <rotateFridge+0x18>
 16e:	00 00       	nop
	_delay_ms(1000);
	PORTJ = 0b00000001; // do rotate anti clockwise
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	80 83       	st	Z, r24
 174:	2f e3       	ldi	r18, 0x3F	; 63
 176:	8d e0       	ldi	r24, 0x0D	; 13
 178:	93 e0       	ldi	r25, 0x03	; 3
 17a:	21 50       	subi	r18, 0x01	; 1
 17c:	80 40       	sbci	r24, 0x00	; 0
 17e:	90 40       	sbci	r25, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <rotateFridge+0x24>
 182:	00 c0       	rjmp	.+0      	; 0x184 <rotateFridge+0x2e>
 184:	00 00       	nop
 186:	08 95       	ret

00000188 <main>:

int main(void)
{

	// setting up the button and interrupt
	DDRB |= (1 << 0);	  // setting 1 for output of the button when it does an interrupt
 188:	84 b1       	in	r24, 0x04	; 4
 18a:	81 60       	ori	r24, 0x01	; 1
 18c:	84 b9       	out	0x04, r24	; 4
	DDRD &= ~(1 << 0);	  // setting 0 for input of the button
 18e:	8a b1       	in	r24, 0x0a	; 10
 190:	8e 7f       	andi	r24, 0xFE	; 254
 192:	8a b9       	out	0x0a, r24	; 10
	EICRA |= (1 << INT3); // Set for falling edge triggering
 194:	e9 e6       	ldi	r30, 0x69	; 105
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	88 60       	ori	r24, 0x08	; 8
 19c:	80 83       	st	Z, r24
	EIMSK |= (1 << INT3); // Enable INT0
 19e:	8d b3       	in	r24, 0x1d	; 29
 1a0:	88 60       	ori	r24, 0x08	; 8
 1a2:	8d bb       	out	0x1d, r24	; 29
	sei();				  // enable external interrupts globally
 1a4:	78 94       	sei

	// setup the LCD
	DDRG = 0xFF; // set all pins on port G to output
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	83 bb       	out	0x13, r24	; 19
	DDRH = 0xFF; // set all pins on port H to output
 1aa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>

	// setting up motor
	DDRJ = 0xFF; // set all pins on port J to output
 1ae:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x7c0104>

	// keypads DDR setup
	DDRA = 0b11110000;
 1b2:	80 ef       	ldi	r24, 0xF0	; 240
 1b4:	81 b9       	out	0x01, r24	; 1
	DDRB = 0b11110001;
 1b6:	81 ef       	ldi	r24, 0xF1	; 241
 1b8:	84 b9       	out	0x04, r24	; 4

	while (1)
	{
		commandMode();
 1ba:	c6 df       	rcall	.-116    	; 0x148 <commandMode>
		lunch();
 1bc:	ab df       	rcall	.-170    	; 0x114 <lunch>
 1be:	8f e0       	ldi	r24, 0x0F	; 15
		PORTH = 0x0f;
 1c0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
		lunch();
 1c4:	a7 df       	rcall	.-178    	; 0x114 <lunch>
 1c6:	82 b1       	in	r24, 0x02	; 2

		// keypadGate
		PORTA &= ~(1 << 4);			   // set column 1 to 0
 1c8:	8f 7e       	andi	r24, 0xEF	; 239
 1ca:	82 b9       	out	0x02, r24	; 2
 1cc:	03 99       	sbic	0x00, 3	; 0
		if ((PINA & 0b00001000) == 00) // check if row 1 is 1
 1ce:	03 c0       	rjmp	.+6      	; 0x1d6 <main+0x4e>
 1d0:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display 1
 1d2:	85 b9       	out	0x05, r24	; 5
 1d4:	0e c0       	rjmp	.+28     	; 0x1f2 <main+0x6a>
 1d6:	02 99       	sbic	0x00, 2	; 0
		}
		else if ((PINA & 0b00000100) == 00)
 1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <main+0x58>
 1da:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display 4
 1dc:	85 b9       	out	0x05, r24	; 5
 1de:	09 c0       	rjmp	.+18     	; 0x1f2 <main+0x6a>
 1e0:	01 99       	sbic	0x00, 1	; 0
		}
		else if ((PINA & 0b00000010) == 00)
 1e2:	03 c0       	rjmp	.+6      	; 0x1ea <main+0x62>
 1e4:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display 7
 1e6:	85 b9       	out	0x05, r24	; 5
 1e8:	04 c0       	rjmp	.+8      	; 0x1f2 <main+0x6a>
 1ea:	00 99       	sbic	0x00, 0	; 0
		}
		else if ((PINA & 0b00000001) == 00)
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <main+0x6a>
 1ee:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display *
 1f0:	85 b9       	out	0x05, r24	; 5
 1f2:	82 b1       	in	r24, 0x02	; 2
		}

		PORTA &= ~(1 << 5);			   // set column 2 to 0
 1f4:	8f 7d       	andi	r24, 0xDF	; 223
 1f6:	82 b9       	out	0x02, r24	; 2
 1f8:	03 99       	sbic	0x00, 3	; 0
		if ((PINA & 0b00001000) == 00) // check if row 1 is 1
 1fa:	03 c0       	rjmp	.+6      	; 0x202 <main+0x7a>
 1fc:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display 2
 1fe:	85 b9       	out	0x05, r24	; 5
 200:	0e c0       	rjmp	.+28     	; 0x21e <main+0x96>
 202:	02 99       	sbic	0x00, 2	; 0
		}
		else if ((PINA & 0b00000100) == 00)
 204:	03 c0       	rjmp	.+6      	; 0x20c <main+0x84>
 206:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display 5
 208:	85 b9       	out	0x05, r24	; 5
 20a:	09 c0       	rjmp	.+18     	; 0x21e <main+0x96>
 20c:	01 99       	sbic	0x00, 1	; 0
		}
		else if ((PINA & 0b00000010) == 00)
 20e:	03 c0       	rjmp	.+6      	; 0x216 <main+0x8e>
 210:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display 8
 212:	85 b9       	out	0x05, r24	; 5
 214:	04 c0       	rjmp	.+8      	; 0x21e <main+0x96>
 216:	00 99       	sbic	0x00, 0	; 0
		}
		else if ((PINA & 0b00000001) == 00)
 218:	02 c0       	rjmp	.+4      	; 0x21e <main+0x96>
 21a:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display 0
 21c:	85 b9       	out	0x05, r24	; 5
 21e:	82 b1       	in	r24, 0x02	; 2
		}

		PORTA &= ~(1 << 6);			   // set column 3 to 0
 220:	8f 7b       	andi	r24, 0xBF	; 191
 222:	82 b9       	out	0x02, r24	; 2
 224:	03 99       	sbic	0x00, 3	; 0
		if ((PINA & 0b00001000) == 00) // check if row 1 is 1
 226:	03 c0       	rjmp	.+6      	; 0x22e <main+0xa6>
 228:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display 3
 22a:	85 b9       	out	0x05, r24	; 5
 22c:	0e c0       	rjmp	.+28     	; 0x24a <main+0xc2>
 22e:	02 99       	sbic	0x00, 2	; 0
		}
		else if ((PINA & 0b00000100) == 00)
 230:	03 c0       	rjmp	.+6      	; 0x238 <main+0xb0>
 232:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display 6
 234:	85 b9       	out	0x05, r24	; 5
 236:	09 c0       	rjmp	.+18     	; 0x24a <main+0xc2>
 238:	01 99       	sbic	0x00, 1	; 0
		}
		else if ((PINA & 0b00000010) == 00)
 23a:	03 c0       	rjmp	.+6      	; 0x242 <main+0xba>
 23c:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display 9
 23e:	85 b9       	out	0x05, r24	; 5
 240:	04 c0       	rjmp	.+8      	; 0x24a <main+0xc2>
 242:	00 99       	sbic	0x00, 0	; 0
		}
		else if ((PINA & 0b00000001) == 00)
 244:	02 c0       	rjmp	.+4      	; 0x24a <main+0xc2>
 246:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display #
 248:	85 b9       	out	0x05, r24	; 5
 24a:	85 b1       	in	r24, 0x05	; 5
		}

		// keypadFridge
		PORTB &= ~(1 << 5);				// set column 1 to 0
 24c:	8f 7d       	andi	r24, 0xDF	; 223
 24e:	85 b9       	out	0x05, r24	; 5
 250:	1c 99       	sbic	0x03, 4	; 3
		if ((PINB & 0b000010000) == 00) // check if row 1 is 1
 252:	03 c0       	rjmp	.+6      	; 0x25a <main+0xd2>
 254:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display 1
 256:	85 b9       	out	0x05, r24	; 5
 258:	0e c0       	rjmp	.+28     	; 0x276 <main+0xee>
 25a:	1b 99       	sbic	0x03, 3	; 3
		}
		else if ((PINB & 0b00001000) == 00)
 25c:	03 c0       	rjmp	.+6      	; 0x264 <main+0xdc>
 25e:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display 4
 260:	85 b9       	out	0x05, r24	; 5
 262:	09 c0       	rjmp	.+18     	; 0x276 <main+0xee>
 264:	1a 99       	sbic	0x03, 2	; 3
		}
		else if ((PINB & 0b00000100) == 00)
 266:	03 c0       	rjmp	.+6      	; 0x26e <main+0xe6>
 268:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display 7
 26a:	85 b9       	out	0x05, r24	; 5
 26c:	04 c0       	rjmp	.+8      	; 0x276 <main+0xee>
 26e:	19 99       	sbic	0x03, 1	; 3
		}
		else if ((PINB & 0b00000010) == 00)
 270:	02 c0       	rjmp	.+4      	; 0x276 <main+0xee>
 272:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display *
 274:	85 b9       	out	0x05, r24	; 5
 276:	85 b1       	in	r24, 0x05	; 5
		}

		PORTB &= ~(1 << 6);				// set column 2 to 0
 278:	8f 7b       	andi	r24, 0xBF	; 191
 27a:	85 b9       	out	0x05, r24	; 5
 27c:	1c 99       	sbic	0x03, 4	; 3
		if ((PINB & 0b000010000) == 00) // check if row 1 is 1
 27e:	03 c0       	rjmp	.+6      	; 0x286 <main+0xfe>
 280:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display 2
 282:	85 b9       	out	0x05, r24	; 5
 284:	0e c0       	rjmp	.+28     	; 0x2a2 <main+0x11a>
 286:	1b 99       	sbic	0x03, 3	; 3
		}
		else if ((PINB & 0b00001000) == 00)
 288:	03 c0       	rjmp	.+6      	; 0x290 <main+0x108>
 28a:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display 5
 28c:	85 b9       	out	0x05, r24	; 5
 28e:	09 c0       	rjmp	.+18     	; 0x2a2 <main+0x11a>
 290:	1a 99       	sbic	0x03, 2	; 3
		}
		else if ((PINB & 0b00000100) == 00)
 292:	03 c0       	rjmp	.+6      	; 0x29a <main+0x112>
 294:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display 8
 296:	85 b9       	out	0x05, r24	; 5
 298:	04 c0       	rjmp	.+8      	; 0x2a2 <main+0x11a>
 29a:	19 99       	sbic	0x03, 1	; 3
		}
		else if ((PINB & 0b00000010) == 00)
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <main+0x11a>
 29e:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display 0
 2a0:	85 b9       	out	0x05, r24	; 5
 2a2:	85 b1       	in	r24, 0x05	; 5
		}

		PORTB &= ~(1 << 7);				// set column 3 to 0
 2a4:	8f 77       	andi	r24, 0x7F	; 127
 2a6:	85 b9       	out	0x05, r24	; 5
 2a8:	1c 99       	sbic	0x03, 4	; 3
		if ((PINB & 0b000010000) == 00) // check if row 1 is 1
 2aa:	03 c0       	rjmp	.+6      	; 0x2b2 <main+0x12a>
 2ac:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display 3
 2ae:	85 b9       	out	0x05, r24	; 5
 2b0:	0e c0       	rjmp	.+28     	; 0x2ce <main+0x146>
 2b2:	1b 99       	sbic	0x03, 3	; 3
		}
		else if ((PINB & 0b00001000) == 00)
 2b4:	03 c0       	rjmp	.+6      	; 0x2bc <main+0x134>
 2b6:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display 6
 2b8:	85 b9       	out	0x05, r24	; 5
 2ba:	09 c0       	rjmp	.+18     	; 0x2ce <main+0x146>
 2bc:	1a 99       	sbic	0x03, 2	; 3
		}
		else if ((PINB & 0b00000100) == 00)
 2be:	03 c0       	rjmp	.+6      	; 0x2c6 <main+0x13e>
 2c0:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display 9
 2c2:	85 b9       	out	0x05, r24	; 5
 2c4:	04 c0       	rjmp	.+8      	; 0x2ce <main+0x146>
 2c6:	19 99       	sbic	0x03, 1	; 3
		}
		else if ((PINB & 0b00000010) == 00)
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <main+0x146>
		{
			PORTB = (1 << 0); // display #
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	85 b9       	out	0x05, r24	; 5
		}

		// rotateFridge();
		rotateFridge();
 2ce:	43 df       	rcall	.-378    	; 0x156 <rotateFridge>
 2d0:	74 cf       	rjmp	.-280    	; 0x1ba <main+0x32>

000002d2 <clearScreen>:
	}
 2d2:	81 e0       	ldi	r24, 0x01	; 1
	_delay_ms(1000);
}
// function to always clear the screen of the LCD
void clearScreen()
{
	PORTH = 0x01;
 2d4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
	lunch();
 2d8:	1d cf       	rjmp	.-454    	; 0x114 <lunch>
 2da:	08 95       	ret

000002dc <displayWelcome>:
{
	PORTG &= ~(1 << 0); // set rs to 0- command mode
	PORTG &= ~(1 << 1); // set rw to 0- write mode
}
void displayWelcome()
{
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
	// the loop to display the welcome message
	for (int i = 0; i < 18; i++)
 2e0:	c0 e0       	ldi	r28, 0x00	; 0
 2e2:	d0 e0       	ldi	r29, 0x00	; 0
 2e4:	09 c0       	rjmp	.+18     	; 0x2f8 <displayWelcome+0x1c>
	{
		dataMode();
 2e6:	29 df       	rcall	.-430    	; 0x13a <dataMode>
		PORTH = message[i];
 2e8:	fe 01       	movw	r30, r28
 2ea:	e0 50       	subi	r30, 0x00	; 0
 2ec:	fe 4f       	sbci	r31, 0xFE	; 254
 2ee:	80 81       	ld	r24, Z
 2f0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
		lunch();
 2f4:	0f df       	rcall	.-482    	; 0x114 <lunch>
	PORTG &= ~(1 << 1); // set rw to 0- write mode
}
void displayWelcome()
{
	// the loop to display the welcome message
	for (int i = 0; i < 18; i++)
 2f6:	21 96       	adiw	r28, 0x01	; 1
 2f8:	c2 31       	cpi	r28, 0x12	; 18
 2fa:	d1 05       	cpc	r29, r1
 2fc:	a4 f3       	brlt	.-24     	; 0x2e6 <displayWelcome+0xa>
 2fe:	2f ed       	ldi	r18, 0xDF	; 223
 300:	83 e9       	ldi	r24, 0x93	; 147
 302:	94 e0       	ldi	r25, 0x04	; 4
 304:	21 50       	subi	r18, 0x01	; 1
 306:	80 40       	sbci	r24, 0x00	; 0
 308:	90 40       	sbci	r25, 0x00	; 0
 30a:	e1 f7       	brne	.-8      	; 0x304 <displayWelcome+0x28>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <displayWelcome+0x32>
		dataMode();
		PORTH = message[i];
		lunch();
	}
	_delay_ms(1500);
	clearScreen();
 30e:	00 00       	nop
 310:	e0 df       	rcall	.-64     	; 0x2d2 <clearScreen>
}
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	08 95       	ret

00000318 <__vector_4>:
	lunch();
}

// do the interrupt service run tine for INT0
ISR(INT3_vect)
{
 318:	1f 92       	push	r1
 31a:	0f 92       	push	r0
 31c:	0f b6       	in	r0, 0x3f	; 63
 31e:	0f 92       	push	r0
 320:	11 24       	eor	r1, r1
 322:	0b b6       	in	r0, 0x3b	; 59
 324:	0f 92       	push	r0
 326:	2f 93       	push	r18
 328:	3f 93       	push	r19
 32a:	4f 93       	push	r20
 32c:	5f 93       	push	r21
 32e:	6f 93       	push	r22
 330:	7f 93       	push	r23
 332:	8f 93       	push	r24
 334:	9f 93       	push	r25
 336:	af 93       	push	r26
 338:	bf 93       	push	r27
 33a:	ef 93       	push	r30
 33c:	ff 93       	push	r31
 33e:	83 ed       	ldi	r24, 0xD3	; 211
 340:	90 e3       	ldi	r25, 0x30	; 48
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <__vector_4+0x2a>
 346:	00 c0       	rjmp	.+0      	; 0x348 <__vector_4+0x30>
 348:	00 00       	nop
	// PORTB ^= (1 << 0); // activate the led on an interrupt
	_delay_ms(50);	  // Delay to denounce the button (if needed)
	displayWelcome(); // Call the function to display the welcome message
 34a:	c8 df       	rcall	.-112    	; 0x2dc <displayWelcome>
 34c:	ff 91       	pop	r31
 34e:	ef 91       	pop	r30
 350:	bf 91       	pop	r27
 352:	af 91       	pop	r26
 354:	9f 91       	pop	r25
 356:	8f 91       	pop	r24
 358:	7f 91       	pop	r23
 35a:	6f 91       	pop	r22
 35c:	5f 91       	pop	r21
 35e:	4f 91       	pop	r20
 360:	3f 91       	pop	r19
 362:	2f 91       	pop	r18
 364:	0f 90       	pop	r0
 366:	0b be       	out	0x3b, r0	; 59
 368:	0f 90       	pop	r0
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	0f 90       	pop	r0
 36e:	1f 90       	pop	r1
 370:	18 95       	reti

00000372 <_exit>:
 372:	f8 94       	cli

00000374 <__stop_program>:
 374:	ff cf       	rjmp	.-2      	; 0x374 <__stop_program>
