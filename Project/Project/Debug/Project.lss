
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800200  00000426  0000049a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000426  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001113  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cd2  00000000  00000000  000016cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000729  00000000  00000000  0000239d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a4  00000000  00000000  00002ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000065a  00000000  00000000  00002c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000048e  00000000  00000000  000032c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00003754  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	e3 c1       	rjmp	.+966    	; 0x3d4 <__vector_3>
   e:	00 00       	nop
  10:	ad c1       	rjmp	.+858    	; 0x36c <__vector_4>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e2       	ldi	r30, 0x26	; 38
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 32       	cpi	r26, 0x2C	; 44
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ac e2       	ldi	r26, 0x2C	; 44
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 32       	cpi	r26, 0x2C	; 44
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	97 d0       	rcall	.+302    	; 0x24e <main>
 120:	80 c1       	rjmp	.+768    	; 0x422 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <keypadGate>:
	{
		dataMode();
		PORTH = numberChildren[i];
		lunch();
	}
}
 124:	82 b1       	in	r24, 0x02	; 2
 126:	8f 7e       	andi	r24, 0xEF	; 239
 128:	82 b9       	out	0x02, r24	; 2
 12a:	03 9b       	sbis	0x00, 3	; 0
 12c:	1d c0       	rjmp	.+58     	; 0x168 <keypadGate+0x44>
 12e:	02 9b       	sbis	0x00, 2	; 0
 130:	1e c0       	rjmp	.+60     	; 0x16e <keypadGate+0x4a>
 132:	01 9b       	sbis	0x00, 1	; 0
 134:	1f c0       	rjmp	.+62     	; 0x174 <keypadGate+0x50>
 136:	00 9b       	sbis	0x00, 0	; 0
 138:	20 c0       	rjmp	.+64     	; 0x17a <keypadGate+0x56>
 13a:	82 b1       	in	r24, 0x02	; 2
 13c:	8f 7d       	andi	r24, 0xDF	; 223
 13e:	82 b9       	out	0x02, r24	; 2
 140:	03 9b       	sbis	0x00, 3	; 0
 142:	1e c0       	rjmp	.+60     	; 0x180 <keypadGate+0x5c>
 144:	02 9b       	sbis	0x00, 2	; 0
 146:	1f c0       	rjmp	.+62     	; 0x186 <keypadGate+0x62>
 148:	01 9b       	sbis	0x00, 1	; 0
 14a:	20 c0       	rjmp	.+64     	; 0x18c <keypadGate+0x68>
 14c:	00 9b       	sbis	0x00, 0	; 0
 14e:	21 c0       	rjmp	.+66     	; 0x192 <keypadGate+0x6e>
 150:	82 b1       	in	r24, 0x02	; 2
 152:	8f 7b       	andi	r24, 0xBF	; 191
 154:	82 b9       	out	0x02, r24	; 2
 156:	03 9b       	sbis	0x00, 3	; 0
 158:	1f c0       	rjmp	.+62     	; 0x198 <keypadGate+0x74>
 15a:	02 9b       	sbis	0x00, 2	; 0
 15c:	20 c0       	rjmp	.+64     	; 0x19e <keypadGate+0x7a>
 15e:	01 9b       	sbis	0x00, 1	; 0
 160:	21 c0       	rjmp	.+66     	; 0x1a4 <keypadGate+0x80>
 162:	00 9b       	sbis	0x00, 0	; 0
 164:	22 c0       	rjmp	.+68     	; 0x1aa <keypadGate+0x86>
 166:	08 95       	ret
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	08 95       	ret
 16e:	84 e0       	ldi	r24, 0x04	; 4
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	08 95       	ret
 174:	87 e0       	ldi	r24, 0x07	; 7
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	08 95       	ret
 17a:	88 ec       	ldi	r24, 0xC8	; 200
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	08 95       	ret
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	08 95       	ret
 186:	85 e0       	ldi	r24, 0x05	; 5
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	08 95       	ret
 18c:	88 e0       	ldi	r24, 0x08	; 8
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	08 95       	ret
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	08 95       	ret
 198:	83 e0       	ldi	r24, 0x03	; 3
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	08 95       	ret
 19e:	86 e0       	ldi	r24, 0x06	; 6
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	08 95       	ret
 1a4:	89 e0       	ldi	r24, 0x09	; 9
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	08 95       	ret
 1aa:	84 e6       	ldi	r24, 0x64	; 100
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	08 95       	ret

000001b0 <lunch>:
 1b0:	84 b3       	in	r24, 0x14	; 20
 1b2:	84 60       	ori	r24, 0x04	; 4
 1b4:	84 bb       	out	0x14, r24	; 20
 1b6:	89 ef       	ldi	r24, 0xF9	; 249
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lunch+0xa>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lunch+0x10>
 1c0:	00 00       	nop
 1c2:	84 b3       	in	r24, 0x14	; 20
 1c4:	8b 7f       	andi	r24, 0xFB	; 251
 1c6:	84 bb       	out	0x14, r24	; 20
 1c8:	89 ef       	ldi	r24, 0xF9	; 249
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <lunch+0x1c>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lunch+0x22>
 1d2:	00 00       	nop
 1d4:	08 95       	ret

000001d6 <dataMode>:
 1d6:	84 b3       	in	r24, 0x14	; 20
 1d8:	81 60       	ori	r24, 0x01	; 1
 1da:	84 bb       	out	0x14, r24	; 20
 1dc:	84 b3       	in	r24, 0x14	; 20
 1de:	8d 7f       	andi	r24, 0xFD	; 253
 1e0:	84 bb       	out	0x14, r24	; 20
 1e2:	08 95       	ret

000001e4 <commandMode>:
 1e4:	84 b3       	in	r24, 0x14	; 20
 1e6:	8e 7f       	andi	r24, 0xFE	; 254
 1e8:	84 bb       	out	0x14, r24	; 20
 1ea:	84 b3       	in	r24, 0x14	; 20
 1ec:	8d 7f       	andi	r24, 0xFD	; 253
 1ee:	84 bb       	out	0x14, r24	; 20
 1f0:	08 95       	ret

000001f2 <registerCar>:
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	c0 e0       	ldi	r28, 0x00	; 0
 1f8:	d0 e0       	ldi	r29, 0x00	; 0
 1fa:	09 c0       	rjmp	.+18     	; 0x20e <registerCar+0x1c>
 1fc:	ec df       	rcall	.-40     	; 0x1d6 <dataMode>
 1fe:	fe 01       	movw	r30, r28
 200:	e0 50       	subi	r30, 0x00	; 0
 202:	fe 4f       	sbci	r31, 0xFE	; 254
 204:	80 81       	ld	r24, Z
 206:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
 20a:	d2 df       	rcall	.-92     	; 0x1b0 <lunch>
 20c:	21 96       	adiw	r28, 0x01	; 1
 20e:	c7 31       	cpi	r28, 0x17	; 23
 210:	d1 05       	cpc	r29, r1
 212:	a4 f3       	brlt	.-24     	; 0x1fc <registerCar+0xa>
 214:	87 df       	rcall	.-242    	; 0x124 <keypadGate>
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <rotateFridge>:

// function to rotate the motor
void rotateFridge()
{
	PORTJ = 0b00000010; // do rotate clockwise
 21c:	e5 e0       	ldi	r30, 0x05	; 5
 21e:	f1 e0       	ldi	r31, 0x01	; 1
 220:	82 e0       	ldi	r24, 0x02	; 2
 222:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 224:	2f e3       	ldi	r18, 0x3F	; 63
 226:	8d e0       	ldi	r24, 0x0D	; 13
 228:	93 e0       	ldi	r25, 0x03	; 3
 22a:	21 50       	subi	r18, 0x01	; 1
 22c:	80 40       	sbci	r24, 0x00	; 0
 22e:	90 40       	sbci	r25, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <rotateFridge+0xe>
 232:	00 c0       	rjmp	.+0      	; 0x234 <rotateFridge+0x18>
 234:	00 00       	nop
	_delay_ms(1000);
	PORTJ = 0b00000001; // do rotate anti clockwise
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	80 83       	st	Z, r24
 23a:	2f e3       	ldi	r18, 0x3F	; 63
 23c:	8d e0       	ldi	r24, 0x0D	; 13
 23e:	93 e0       	ldi	r25, 0x03	; 3
 240:	21 50       	subi	r18, 0x01	; 1
 242:	80 40       	sbci	r24, 0x00	; 0
 244:	90 40       	sbci	r25, 0x00	; 0
 246:	e1 f7       	brne	.-8      	; 0x240 <rotateFridge+0x24>
 248:	00 c0       	rjmp	.+0      	; 0x24a <rotateFridge+0x2e>
 24a:	00 00       	nop
 24c:	08 95       	ret

0000024e <main>:

int main(void)
{

	// setting up the button and interrupt
	DDRB |= (1 << 0);  // setting 1 for output of the button when it does an interrupt
 24e:	84 b1       	in	r24, 0x04	; 4
 250:	81 60       	ori	r24, 0x01	; 1
 252:	84 b9       	out	0x04, r24	; 4
	DDRD &= ~(1 << 3); // setting 0 for input of the button
 254:	8a b1       	in	r24, 0x0a	; 10
 256:	87 7f       	andi	r24, 0xF7	; 247
 258:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 2); // setting 0 for input of the button
 25a:	8a b1       	in	r24, 0x0a	; 10
 25c:	8b 7f       	andi	r24, 0xFB	; 251
 25e:	8a b9       	out	0x0a, r24	; 10
	// for 1st btn
	EICRA |= (1 << INT3); // Set for falling edge triggering
 260:	e9 e6       	ldi	r30, 0x69	; 105
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	88 60       	ori	r24, 0x08	; 8
 268:	80 83       	st	Z, r24
	EIMSK |= (1 << INT3); // Enable INT0
 26a:	8d b3       	in	r24, 0x1d	; 29
 26c:	88 60       	ori	r24, 0x08	; 8
 26e:	8d bb       	out	0x1d, r24	; 29
	// for 2nd btn
	EICRA |= (1 << INT2);
 270:	80 81       	ld	r24, Z
 272:	84 60       	ori	r24, 0x04	; 4
 274:	80 83       	st	Z, r24
	EIMSK |= (1 << INT2);
 276:	8d b3       	in	r24, 0x1d	; 29
 278:	84 60       	ori	r24, 0x04	; 4
 27a:	8d bb       	out	0x1d, r24	; 29
	sei(); // enable external interrupts globally
 27c:	78 94       	sei

	// setup the LCD
	DDRG = 0xFF; // set all pins on port G to output
 27e:	8f ef       	ldi	r24, 0xFF	; 255
 280:	83 bb       	out	0x13, r24	; 19
	DDRH = 0xFF; // set all pins on port H to output
 282:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>

	// setting up motor
	DDRJ = 0xFF; // set all pins on port J to output
 286:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x7c0104>

	// keypads DDR setup
	DDRA = 0b11110000;
 28a:	80 ef       	ldi	r24, 0xF0	; 240
 28c:	81 b9       	out	0x01, r24	; 1
	DDRB = 0b11110001;
 28e:	81 ef       	ldi	r24, 0xF1	; 241
 290:	84 b9       	out	0x04, r24	; 4

	while (1)
	{
		commandMode();
 292:	a8 df       	rcall	.-176    	; 0x1e4 <commandMode>
		lunch();
 294:	8d df       	rcall	.-230    	; 0x1b0 <lunch>
 296:	8f e0       	ldi	r24, 0x0F	; 15
		PORTH = 0x0f;
 298:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
		lunch();
 29c:	89 df       	rcall	.-238    	; 0x1b0 <lunch>
 29e:	85 b1       	in	r24, 0x05	; 5

		// keypadGate

		// keypadFridge
		PORTB &= ~(1 << 5);				// set column 1 to 0
 2a0:	8f 7d       	andi	r24, 0xDF	; 223
 2a2:	85 b9       	out	0x05, r24	; 5
 2a4:	1c 99       	sbic	0x03, 4	; 3
		if ((PINB & 0b000010000) == 00) // check if row 1 is 1
 2a6:	03 c0       	rjmp	.+6      	; 0x2ae <main+0x60>
 2a8:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display 1
 2aa:	85 b9       	out	0x05, r24	; 5
 2ac:	0e c0       	rjmp	.+28     	; 0x2ca <main+0x7c>
 2ae:	1b 99       	sbic	0x03, 3	; 3
		}
		else if ((PINB & 0b00001000) == 00)
 2b0:	03 c0       	rjmp	.+6      	; 0x2b8 <main+0x6a>
 2b2:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display 4
 2b4:	85 b9       	out	0x05, r24	; 5
 2b6:	09 c0       	rjmp	.+18     	; 0x2ca <main+0x7c>
 2b8:	1a 99       	sbic	0x03, 2	; 3
		}
		else if ((PINB & 0b00000100) == 00)
 2ba:	03 c0       	rjmp	.+6      	; 0x2c2 <main+0x74>
 2bc:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display 7
 2be:	85 b9       	out	0x05, r24	; 5
 2c0:	04 c0       	rjmp	.+8      	; 0x2ca <main+0x7c>
 2c2:	19 99       	sbic	0x03, 1	; 3
		}
		else if ((PINB & 0b00000010) == 00)
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <main+0x7c>
 2c6:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display *
 2c8:	85 b9       	out	0x05, r24	; 5
 2ca:	85 b1       	in	r24, 0x05	; 5
		}

		PORTB &= ~(1 << 6);				// set column 2 to 0
 2cc:	8f 7b       	andi	r24, 0xBF	; 191
 2ce:	85 b9       	out	0x05, r24	; 5
 2d0:	1c 99       	sbic	0x03, 4	; 3
		if ((PINB & 0b000010000) == 00) // check if row 1 is 1
 2d2:	03 c0       	rjmp	.+6      	; 0x2da <main+0x8c>
 2d4:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display 2
 2d6:	85 b9       	out	0x05, r24	; 5
 2d8:	0e c0       	rjmp	.+28     	; 0x2f6 <main+0xa8>
 2da:	1b 99       	sbic	0x03, 3	; 3
		}
		else if ((PINB & 0b00001000) == 00)
 2dc:	03 c0       	rjmp	.+6      	; 0x2e4 <main+0x96>
 2de:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display 5
 2e0:	85 b9       	out	0x05, r24	; 5
 2e2:	09 c0       	rjmp	.+18     	; 0x2f6 <main+0xa8>
 2e4:	1a 99       	sbic	0x03, 2	; 3
		}
		else if ((PINB & 0b00000100) == 00)
 2e6:	03 c0       	rjmp	.+6      	; 0x2ee <main+0xa0>
 2e8:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display 8
 2ea:	85 b9       	out	0x05, r24	; 5
 2ec:	04 c0       	rjmp	.+8      	; 0x2f6 <main+0xa8>
 2ee:	19 99       	sbic	0x03, 1	; 3
		}
		else if ((PINB & 0b00000010) == 00)
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <main+0xa8>
 2f2:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display 0
 2f4:	85 b9       	out	0x05, r24	; 5
 2f6:	85 b1       	in	r24, 0x05	; 5
		}

		PORTB &= ~(1 << 7);				// set column 3 to 0
 2f8:	8f 77       	andi	r24, 0x7F	; 127
 2fa:	85 b9       	out	0x05, r24	; 5
 2fc:	1c 99       	sbic	0x03, 4	; 3
		if ((PINB & 0b000010000) == 00) // check if row 1 is 1
 2fe:	03 c0       	rjmp	.+6      	; 0x306 <main+0xb8>
 300:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display 3
 302:	85 b9       	out	0x05, r24	; 5
 304:	0e c0       	rjmp	.+28     	; 0x322 <main+0xd4>
 306:	1b 99       	sbic	0x03, 3	; 3
		}
		else if ((PINB & 0b00001000) == 00)
 308:	03 c0       	rjmp	.+6      	; 0x310 <main+0xc2>
 30a:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display 6
 30c:	85 b9       	out	0x05, r24	; 5
 30e:	09 c0       	rjmp	.+18     	; 0x322 <main+0xd4>
 310:	1a 99       	sbic	0x03, 2	; 3
		}
		else if ((PINB & 0b00000100) == 00)
 312:	03 c0       	rjmp	.+6      	; 0x31a <main+0xcc>
 314:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTB = (1 << 0); // display 9
 316:	85 b9       	out	0x05, r24	; 5
 318:	04 c0       	rjmp	.+8      	; 0x322 <main+0xd4>
 31a:	19 99       	sbic	0x03, 1	; 3
		}
		else if ((PINB & 0b00000010) == 00)
 31c:	02 c0       	rjmp	.+4      	; 0x322 <main+0xd4>
		{
			PORTB = (1 << 0); // display #
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	85 b9       	out	0x05, r24	; 5
		}

		// rotateFridge();
		rotateFridge();
 322:	7c df       	rcall	.-264    	; 0x21c <rotateFridge>
 324:	b6 cf       	rjmp	.-148    	; 0x292 <main+0x44>

00000326 <clearScreen>:
	}
 326:	81 e0       	ldi	r24, 0x01	; 1
	_delay_ms(1000);
}
// function to always clear the screen of the LCD
void clearScreen()
{
	PORTH = 0x01;
 328:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
	lunch();
 32c:	41 cf       	rjmp	.-382    	; 0x1b0 <lunch>
 32e:	08 95       	ret

00000330 <displayWelcome>:
{
	PORTG &= ~(1 << 0); // set rs to 0- command mode
	PORTG &= ~(1 << 1); // set rw to 0- write mode
}
void displayWelcome()
{
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
	// the loop to display the welcome message
	for (int i = 0; i < 18; i++)
 334:	c0 e0       	ldi	r28, 0x00	; 0
 336:	d0 e0       	ldi	r29, 0x00	; 0
 338:	09 c0       	rjmp	.+18     	; 0x34c <displayWelcome+0x1c>
	{
		dataMode();
 33a:	4d df       	rcall	.-358    	; 0x1d6 <dataMode>
		PORTH = message[i];
 33c:	fe 01       	movw	r30, r28
 33e:	e8 5e       	subi	r30, 0xE8	; 232
 340:	fd 4f       	sbci	r31, 0xFD	; 253
 342:	80 81       	ld	r24, Z
 344:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
		lunch();
 348:	33 df       	rcall	.-410    	; 0x1b0 <lunch>
	PORTG &= ~(1 << 1); // set rw to 0- write mode
}
void displayWelcome()
{
	// the loop to display the welcome message
	for (int i = 0; i < 18; i++)
 34a:	21 96       	adiw	r28, 0x01	; 1
 34c:	c2 31       	cpi	r28, 0x12	; 18
 34e:	d1 05       	cpc	r29, r1
 350:	a4 f3       	brlt	.-24     	; 0x33a <displayWelcome+0xa>
 352:	2f e9       	ldi	r18, 0x9F	; 159
 354:	86 e8       	ldi	r24, 0x86	; 134
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	21 50       	subi	r18, 0x01	; 1
 35a:	80 40       	sbci	r24, 0x00	; 0
 35c:	90 40       	sbci	r25, 0x00	; 0
 35e:	e1 f7       	brne	.-8      	; 0x358 <displayWelcome+0x28>
 360:	00 c0       	rjmp	.+0      	; 0x362 <displayWelcome+0x32>
		dataMode();
		PORTH = message[i];
		lunch();
	}
	_delay_ms(500);
	clearScreen();
 362:	00 00       	nop
 364:	e0 df       	rcall	.-64     	; 0x326 <clearScreen>
}
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <__vector_4>:
	lunch();
}

// do the interrupt service run tine for INT0
ISR(INT3_vect)
{
 36c:	1f 92       	push	r1
 36e:	0f 92       	push	r0
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	0f 92       	push	r0
 374:	11 24       	eor	r1, r1
 376:	0b b6       	in	r0, 0x3b	; 59
 378:	0f 92       	push	r0
 37a:	2f 93       	push	r18
 37c:	3f 93       	push	r19
 37e:	4f 93       	push	r20
 380:	5f 93       	push	r21
 382:	6f 93       	push	r22
 384:	7f 93       	push	r23
 386:	8f 93       	push	r24
 388:	9f 93       	push	r25
 38a:	af 93       	push	r26
 38c:	bf 93       	push	r27
 38e:	ef 93       	push	r30
 390:	ff 93       	push	r31
	PORTB ^= (1 << 0); // activate the led on an interrupt
 392:	95 b1       	in	r25, 0x05	; 5
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	89 27       	eor	r24, r25
 398:	85 b9       	out	0x05, r24	; 5
 39a:	2f e3       	ldi	r18, 0x3F	; 63
 39c:	8d e0       	ldi	r24, 0x0D	; 13
 39e:	93 e0       	ldi	r25, 0x03	; 3
 3a0:	21 50       	subi	r18, 0x01	; 1
 3a2:	80 40       	sbci	r24, 0x00	; 0
 3a4:	90 40       	sbci	r25, 0x00	; 0
 3a6:	e1 f7       	brne	.-8      	; 0x3a0 <__vector_4+0x34>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <__vector_4+0x3e>
 3aa:	00 00       	nop
	_delay_ms(1000);
	displayWelcome(); // Call the function to display the welcome messagel
 3ac:	c1 df       	rcall	.-126    	; 0x330 <displayWelcome>
}
 3ae:	ff 91       	pop	r31
 3b0:	ef 91       	pop	r30
 3b2:	bf 91       	pop	r27
 3b4:	af 91       	pop	r26
 3b6:	9f 91       	pop	r25
 3b8:	8f 91       	pop	r24
 3ba:	7f 91       	pop	r23
 3bc:	6f 91       	pop	r22
 3be:	5f 91       	pop	r21
 3c0:	4f 91       	pop	r20
 3c2:	3f 91       	pop	r19
 3c4:	2f 91       	pop	r18
 3c6:	0f 90       	pop	r0
 3c8:	0b be       	out	0x3b, r0	; 59
 3ca:	0f 90       	pop	r0
 3cc:	0f be       	out	0x3f, r0	; 63
 3ce:	0f 90       	pop	r0
 3d0:	1f 90       	pop	r1
 3d2:	18 95       	reti

000003d4 <__vector_3>:

ISR(INT2_vect)
{
 3d4:	1f 92       	push	r1
 3d6:	0f 92       	push	r0
 3d8:	0f b6       	in	r0, 0x3f	; 63
 3da:	0f 92       	push	r0
 3dc:	11 24       	eor	r1, r1
 3de:	0b b6       	in	r0, 0x3b	; 59
 3e0:	0f 92       	push	r0
 3e2:	2f 93       	push	r18
 3e4:	3f 93       	push	r19
 3e6:	4f 93       	push	r20
 3e8:	5f 93       	push	r21
 3ea:	6f 93       	push	r22
 3ec:	7f 93       	push	r23
 3ee:	8f 93       	push	r24
 3f0:	9f 93       	push	r25
 3f2:	af 93       	push	r26
 3f4:	bf 93       	push	r27
 3f6:	ef 93       	push	r30
 3f8:	ff 93       	push	r31
	registerCar();
 3fa:	fb de       	rcall	.-522    	; 0x1f2 <registerCar>
 3fc:	ff 91       	pop	r31
 3fe:	ef 91       	pop	r30
 400:	bf 91       	pop	r27
 402:	af 91       	pop	r26
 404:	9f 91       	pop	r25
 406:	8f 91       	pop	r24
 408:	7f 91       	pop	r23
 40a:	6f 91       	pop	r22
 40c:	5f 91       	pop	r21
 40e:	4f 91       	pop	r20
 410:	3f 91       	pop	r19
 412:	2f 91       	pop	r18
 414:	0f 90       	pop	r0
 416:	0b be       	out	0x3b, r0	; 59
 418:	0f 90       	pop	r0
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	0f 90       	pop	r0
 41e:	1f 90       	pop	r1
 420:	18 95       	reti

00000422 <_exit>:
 422:	f8 94       	cli

00000424 <__stop_program>:
 424:	ff cf       	rjmp	.-2      	; 0x424 <__stop_program>
