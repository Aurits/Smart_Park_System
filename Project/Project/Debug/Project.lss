
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  000001e4  00000258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e68  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c9c  00000000  00000000  0000118c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000442  00000000  00000000  00001e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  0000226c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005c6  00000000  00000000  00002300  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000128  00000000  00000000  000028c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000029ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	81 c0       	rjmp	.+258    	; 0x114 <__vector_4>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 ee       	ldi	r30, 0xE4	; 228
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 31       	cpi	r26, 0x12	; 18
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	49 d0       	rcall	.+146    	; 0x1a2 <main>
 110:	67 c0       	rjmp	.+206    	; 0x1e0 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <__vector_4>:
		lunch();
	}
}
// do the interrupt service run tine for INT0
ISR(INT3_vect)
{
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
	PORTC ^= (1 << 3); // activate the led on an interrupt
 122:	98 b1       	in	r25, 0x08	; 8
 124:	88 e0       	ldi	r24, 0x08	; 8
 126:	89 27       	eor	r24, r25
 128:	88 b9       	out	0x08, r24	; 8
					   // displayWelcome();
}
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <lunch>:

// function to write to the LCD
void lunch()
{
	PORTG |= (1 << 2); // set enable to 1
 138:	84 b3       	in	r24, 0x14	; 20
 13a:	84 60       	ori	r24, 0x04	; 4
 13c:	84 bb       	out	0x14, r24	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	89 ef       	ldi	r24, 0xF9	; 249
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <lunch+0xa>
 146:	00 c0       	rjmp	.+0      	; 0x148 <lunch+0x10>
 148:	00 00       	nop
	_delay_ms(1);	   // wait 1ms
	PORTG &= ~(1 << 2);
 14a:	84 b3       	in	r24, 0x14	; 20
 14c:	8b 7f       	andi	r24, 0xFB	; 251
 14e:	84 bb       	out	0x14, r24	; 20
 150:	89 ef       	ldi	r24, 0xF9	; 249
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <lunch+0x1c>
 158:	00 c0       	rjmp	.+0      	; 0x15a <lunch+0x22>
 15a:	00 00       	nop
 15c:	08 95       	ret

0000015e <dataMode>:
}

// function for LCD data mode
void dataMode()
{
	PORTG |= (1 << 0);	// set rs to 1- data mode
 15e:	84 b3       	in	r24, 0x14	; 20
 160:	81 60       	ori	r24, 0x01	; 1
 162:	84 bb       	out	0x14, r24	; 20
	PORTG &= ~(1 << 1); // set rw to 0- write mode
 164:	84 b3       	in	r24, 0x14	; 20
 166:	8d 7f       	andi	r24, 0xFD	; 253
 168:	84 bb       	out	0x14, r24	; 20
 16a:	08 95       	ret

0000016c <displayWelcome>:
		displayWelcome();
	}
}

void displayWelcome()
{
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
	// the loop to display the welcome message
	for (int i = 0; i < 17; i++)
 170:	c0 e0       	ldi	r28, 0x00	; 0
 172:	d0 e0       	ldi	r29, 0x00	; 0
 174:	09 c0       	rjmp	.+18     	; 0x188 <displayWelcome+0x1c>
	{
		dataMode();
 176:	f3 df       	rcall	.-26     	; 0x15e <dataMode>
		PORTH = message[i];
 178:	fe 01       	movw	r30, r28
 17a:	e0 50       	subi	r30, 0x00	; 0
 17c:	fe 4f       	sbci	r31, 0xFE	; 254
 17e:	80 81       	ld	r24, Z
 180:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
		lunch();
 184:	d9 df       	rcall	.-78     	; 0x138 <lunch>
}

void displayWelcome()
{
	// the loop to display the welcome message
	for (int i = 0; i < 17; i++)
 186:	21 96       	adiw	r28, 0x01	; 1
 188:	c1 31       	cpi	r28, 0x11	; 17
 18a:	d1 05       	cpc	r29, r1
 18c:	a4 f3       	brlt	.-24     	; 0x176 <displayWelcome+0xa>
	{
		dataMode();
		PORTH = message[i];
		lunch();
	}
}
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <commandMode>:
}

// function for LCD command mode
void commandMode()
{
	PORTG &= ~(1 << 0); // set rs to 0- command mode
 194:	84 b3       	in	r24, 0x14	; 20
 196:	8e 7f       	andi	r24, 0xFE	; 254
 198:	84 bb       	out	0x14, r24	; 20
	PORTG &= ~(1 << 1); // set rw to 0- write mode
 19a:	84 b3       	in	r24, 0x14	; 20
 19c:	8d 7f       	andi	r24, 0xFD	; 253
 19e:	84 bb       	out	0x14, r24	; 20
 1a0:	08 95       	ret

000001a2 <main>:

int main(void)
{

	// setting up the button and interrupt
	DDRC |= (1 << 3);	  // setting 1 for output of the button when it does an interrupt
 1a2:	87 b1       	in	r24, 0x07	; 7
 1a4:	88 60       	ori	r24, 0x08	; 8
 1a6:	87 b9       	out	0x07, r24	; 7
	DDRD &= ~(1 << 0);	  // setting 0 for input of the button
 1a8:	8a b1       	in	r24, 0x0a	; 10
 1aa:	8e 7f       	andi	r24, 0xFE	; 254
 1ac:	8a b9       	out	0x0a, r24	; 10
	EICRA |= (1 << INT3); // Set for falling edge triggering
 1ae:	e9 e6       	ldi	r30, 0x69	; 105
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	88 60       	ori	r24, 0x08	; 8
 1b6:	80 83       	st	Z, r24
	EIMSK |= (1 << INT3); // Enable INT0
 1b8:	8d b3       	in	r24, 0x1d	; 29
 1ba:	88 60       	ori	r24, 0x08	; 8
 1bc:	8d bb       	out	0x1d, r24	; 29
	sei();				  // enable external interrupts globally
 1be:	78 94       	sei

	// setup the LCD
	DDRG = 0xFF; // set all pins on port C to output
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	83 bb       	out	0x13, r24	; 19
	DDRH = 0xFF; // set all pins on port D to output
 1c4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>

	while (1)
	{
		commandMode();
 1c8:	e5 df       	rcall	.-54     	; 0x194 <commandMode>
		lunch();
 1ca:	b6 df       	rcall	.-148    	; 0x138 <lunch>
 1cc:	c2 e0       	ldi	r28, 0x02	; 2
		PORTH = 0x0f;
 1ce:	d1 e0       	ldi	r29, 0x01	; 1
 1d0:	8f e0       	ldi	r24, 0x0F	; 15
 1d2:	88 83       	st	Y, r24
		lunch();
 1d4:	b1 df       	rcall	.-158    	; 0x138 <lunch>
		PORTH = 0x3f;
 1d6:	8f e3       	ldi	r24, 0x3F	; 63
		lunch();
 1d8:	88 83       	st	Y, r24
 1da:	ae df       	rcall	.-164    	; 0x138 <lunch>

		// the loop to display the welcome message
		displayWelcome();
 1dc:	c7 df       	rcall	.-114    	; 0x16c <displayWelcome>
 1de:	f4 cf       	rjmp	.-24     	; 0x1c8 <main+0x26>

000001e0 <_exit>:
 1e0:	f8 94       	cli

000001e2 <__stop_program>:
 1e2:	ff cf       	rjmp	.-2      	; 0x1e2 <__stop_program>
