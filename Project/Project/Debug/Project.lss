
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  00000218  0000028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000218  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e5a  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c9e  00000000  00000000  000011b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000435  00000000  00000000  00001e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00002288  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005c6  00000000  00000000  00002350  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f0  00000000  00000000  00002916  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002b06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	d0 c0       	rjmp	.+416    	; 0x1b2 <__vector_4>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e1       	ldi	r30, 0x18	; 24
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 31       	cpi	r26, 0x12	; 18
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	23 d0       	rcall	.+70     	; 0x156 <main>
 110:	81 c0       	rjmp	.+258    	; 0x214 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <lunch>:
}

// function to write to the LCD
void lunch()
{
	PORTG |= (1 << 2); // set enable to 1
 114:	84 b3       	in	r24, 0x14	; 20
 116:	84 60       	ori	r24, 0x04	; 4
 118:	84 bb       	out	0x14, r24	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	89 ef       	ldi	r24, 0xF9	; 249
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <lunch+0xa>
 122:	00 c0       	rjmp	.+0      	; 0x124 <lunch+0x10>
 124:	00 00       	nop
	_delay_ms(1);	   // wait 1ms
	PORTG &= ~(1 << 2);
 126:	84 b3       	in	r24, 0x14	; 20
 128:	8b 7f       	andi	r24, 0xFB	; 251
 12a:	84 bb       	out	0x14, r24	; 20
 12c:	89 ef       	ldi	r24, 0xF9	; 249
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <lunch+0x1c>
 134:	00 c0       	rjmp	.+0      	; 0x136 <lunch+0x22>
 136:	00 00       	nop
 138:	08 95       	ret

0000013a <dataMode>:
	_delay_ms(1);
}
// function for LCD data mode
void dataMode()
{
	PORTG |= (1 << 0);	// set rs to 1- data mode
 13a:	84 b3       	in	r24, 0x14	; 20
 13c:	81 60       	ori	r24, 0x01	; 1
 13e:	84 bb       	out	0x14, r24	; 20
	PORTG &= ~(1 << 1); // set rw to 0- write mode
 140:	84 b3       	in	r24, 0x14	; 20
 142:	8d 7f       	andi	r24, 0xFD	; 253
 144:	84 bb       	out	0x14, r24	; 20
 146:	08 95       	ret

00000148 <commandMode>:
}
// function for LCD command mode
void commandMode()
{
	PORTG &= ~(1 << 0); // set rs to 0- command mode
 148:	84 b3       	in	r24, 0x14	; 20
 14a:	8e 7f       	andi	r24, 0xFE	; 254
 14c:	84 bb       	out	0x14, r24	; 20
	PORTG &= ~(1 << 1); // set rw to 0- write mode
 14e:	84 b3       	in	r24, 0x14	; 20
 150:	8d 7f       	andi	r24, 0xFD	; 253
 152:	84 bb       	out	0x14, r24	; 20
 154:	08 95       	ret

00000156 <main>:

int main(void)
{

	// setting up the button and interrupt
	DDRC |= (1 << 3);	  // setting 1 for output of the button when it does an interrupt
 156:	87 b1       	in	r24, 0x07	; 7
 158:	88 60       	ori	r24, 0x08	; 8
 15a:	87 b9       	out	0x07, r24	; 7
	DDRD &= ~(1 << 0);	  // setting 0 for input of the button
 15c:	8a b1       	in	r24, 0x0a	; 10
 15e:	8e 7f       	andi	r24, 0xFE	; 254
 160:	8a b9       	out	0x0a, r24	; 10
	EICRA |= (1 << INT3); // Set for falling edge triggering
 162:	e9 e6       	ldi	r30, 0x69	; 105
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	88 60       	ori	r24, 0x08	; 8
 16a:	80 83       	st	Z, r24
	EIMSK |= (1 << INT3); // Enable INT0
 16c:	8d b3       	in	r24, 0x1d	; 29
 16e:	88 60       	ori	r24, 0x08	; 8
 170:	8d bb       	out	0x1d, r24	; 29
	sei();				  // enable external interrupts globally
 172:	78 94       	sei

	// setup the LCD
	DDRG = 0xFF; // set all pins on port C to output
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	83 bb       	out	0x13, r24	; 19
	DDRH = 0xFF; // set all pins on port D to output
 178:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>

	while (1)
	{
		commandMode();
 17c:	e5 df       	rcall	.-54     	; 0x148 <commandMode>
		lunch();
 17e:	ca df       	rcall	.-108    	; 0x114 <lunch>
 180:	8f e0       	ldi	r24, 0x0F	; 15
		PORTH = 0x0f;
 182:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
		lunch();
 186:	c6 df       	rcall	.-116    	; 0x114 <lunch>
 188:	f9 cf       	rjmp	.-14     	; 0x17c <main+0x26>

0000018a <displayWelcome>:
 18a:	cf 93       	push	r28
{
	PORTG &= ~(1 << 0); // set rs to 0- command mode
	PORTG &= ~(1 << 1); // set rw to 0- write mode
}
void displayWelcome()
{
 18c:	df 93       	push	r29
	// the loop to display the welcome message
	for (int i = 0; i < 18; i++)
 18e:	c0 e0       	ldi	r28, 0x00	; 0
 190:	d0 e0       	ldi	r29, 0x00	; 0
 192:	09 c0       	rjmp	.+18     	; 0x1a6 <displayWelcome+0x1c>
	{
		dataMode();
 194:	d2 df       	rcall	.-92     	; 0x13a <dataMode>
		PORTH = message[i];
 196:	fe 01       	movw	r30, r28
 198:	e0 50       	subi	r30, 0x00	; 0
 19a:	fe 4f       	sbci	r31, 0xFE	; 254
 19c:	80 81       	ld	r24, Z
 19e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
		lunch();
 1a2:	b8 df       	rcall	.-144    	; 0x114 <lunch>
	PORTG &= ~(1 << 1); // set rw to 0- write mode
}
void displayWelcome()
{
	// the loop to display the welcome message
	for (int i = 0; i < 18; i++)
 1a4:	21 96       	adiw	r28, 0x01	; 1
 1a6:	c2 31       	cpi	r28, 0x12	; 18
 1a8:	d1 05       	cpc	r29, r1
 1aa:	a4 f3       	brlt	.-24     	; 0x194 <displayWelcome+0xa>
	{
		dataMode();
		PORTH = message[i];
		lunch();
	}
}
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <__vector_4>:
// do the interrupt service run tine for INT0
ISR(INT3_vect)
{
 1b2:	1f 92       	push	r1
 1b4:	0f 92       	push	r0
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	0f 92       	push	r0
 1ba:	11 24       	eor	r1, r1
 1bc:	0b b6       	in	r0, 0x3b	; 59
 1be:	0f 92       	push	r0
 1c0:	2f 93       	push	r18
 1c2:	3f 93       	push	r19
 1c4:	4f 93       	push	r20
 1c6:	5f 93       	push	r21
 1c8:	6f 93       	push	r22
 1ca:	7f 93       	push	r23
 1cc:	8f 93       	push	r24
 1ce:	9f 93       	push	r25
 1d0:	af 93       	push	r26
 1d2:	bf 93       	push	r27
 1d4:	ef 93       	push	r30
 1d6:	ff 93       	push	r31
	PORTC ^= (1 << 3); // activate the led on an interrupt
 1d8:	98 b1       	in	r25, 0x08	; 8
 1da:	88 e0       	ldi	r24, 0x08	; 8
 1dc:	89 27       	eor	r24, r25
 1de:	88 b9       	out	0x08, r24	; 8
 1e0:	83 ed       	ldi	r24, 0xD3	; 211
 1e2:	90 e3       	ldi	r25, 0x30	; 48
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <__vector_4+0x32>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <__vector_4+0x38>
 1ea:	00 00       	nop
	_delay_ms(50);	   // Delay to denounce the button (if needed)
	displayWelcome();  // Call the function to display the welcome message
 1ec:	ce df       	rcall	.-100    	; 0x18a <displayWelcome>
 1ee:	ff 91       	pop	r31
 1f0:	ef 91       	pop	r30
 1f2:	bf 91       	pop	r27
 1f4:	af 91       	pop	r26
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	7f 91       	pop	r23
 1fc:	6f 91       	pop	r22
 1fe:	5f 91       	pop	r21
 200:	4f 91       	pop	r20
 202:	3f 91       	pop	r19
 204:	2f 91       	pop	r18
 206:	0f 90       	pop	r0
 208:	0b be       	out	0x3b, r0	; 59
 20a:	0f 90       	pop	r0
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	0f 90       	pop	r0
 210:	1f 90       	pop	r1
 212:	18 95       	reti

00000214 <_exit>:
 214:	f8 94       	cli

00000216 <__stop_program>:
 216:	ff cf       	rjmp	.-2      	; 0x216 <__stop_program>
